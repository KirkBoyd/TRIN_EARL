<launch>
	<!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
	<include file="$(find gazebo_ros)/launch/empty_world.launch">
		<arg name="world_name" value="worlds/text.world"/> <!-- Note: the world_name is with respect to GAZEBO_RESOURCE_PATH environmental variable -->
		<arg name="paused" value="false"/>
		<arg name="use_sim_time" value="true"/>
		<arg name="gui" value="true"/>
		<arg name="headless" value="false"/>
		<arg name="debug" value="false"/>
	</include>

	<node pkg="rviz" type="rviz" name="rviz" />

	<node pkg="igvc" type="fake_scan" name="laser_scan">
		<param name="frame_id" value="laser_frame"/>
		<param name="calibrate_time" type="bool" value="true"/>  
		<param name="intensity" type="bool" value="false"/>
		<param name="min_ang" value="0"/>   
		<param name="max_ang" value="3.14"/>    
		<param name="cluster" value="1"/>
	</node>

	<remap from="odom" to="odometry/filtered" />

	<node name="rplidarNode" pkg="rplidar_ros"  type="rplidarNode">
		<param name="serial_port"         type="string" value="/dev/ttyUSB0"/>  
		<param name="serial_baudrate"     type="int"    value="115200"/>
		<param name="frame_id"            type="string" value="laser_frame"/>
		<param name="inverted"            type="bool"   value="false"/>
		<param name="angle_compensate"    type="bool"   value="true"/>
		<param name="angle_min"           value="3.14159/4"/>
		<param name="angle_max"           value="-3.14159/4"/>
	</node>

	<node pkg="hector_slam" type="hector_mapping" name="hector_mapping"/>
	<node pkg="hector_slam" type="hector_map_server" name="hector_map_server" />
	<node pkg="hector_slam" type="hector_trajectory_server" name="hector_trajectory_server" />
	
	<remap from="odom" to="odometry/filtered" />

	<include file="$(find robot_localization)/launch/ekf_template.launch" />
	<include file="$(find robot_localization)/launch/ekf_template2.launch" />

	<arg name="odom_frame_id"   default="odom"/>
	<arg name="base_frame_id"   default="base_link"/>
	<arg name="global_frame_id" default="map"/>
	<arg name="odom_topic" default="odom" />
	<arg name="laser_topic" default="scan" />

	<node pkg="topic_tools" type="mux" respawn="true" name="mux" args="cmd_vel man_cmdvel mux:=mux_cmdvel" />

	<node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
		<rosparam file="$(find igvc)/param/costmap_common_params.yaml" command="load" ns="global_costmap" />
		<rosparam file="$(find igvc)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />   
		<rosparam file="$(find igvc)/param/local_costmap_params.yaml" command="load" />   
		<rosparam file="$(find igvc)/param/global_costmap_params.yaml" command="load" />
		<rosparam file="$(find igvc)/param/dwa_local_planner_params.yaml" command="load" />
		<rosparam file="$(find igvc)/param/move_base_params.yaml" command="load" />
		<rosparam file="$(find igvc)/param/global_planner_params.yaml" command="load" />
		<rosparam file="$(find igvc)/param/navfn_global_planner_params.yaml" command="load" />

		<param name="global_costmap/global_frame" value="$(arg global_frame_id)"/>
		<param name="global_costmap/robot_base_frame" value="$(arg base_frame_id)"/>
		<param name="local_costmap/global_frame" value="$(arg global_frame_id)"/> <!-- Local -->
		<param name="local_costmap/robot_base_frame" value="$(arg base_frame_id)"/>

		<param name="DWAPlannerROS/global_frame_id" value="$(arg global_frame_id)"/> <!-- -->
	</node>

	<node pkg="igvc" type="motor_controller" name="motor_controller" />
	<node pkg="igvc" type="twist_to_motors.py" name="twist_to_motors" />

	<node pkg="robot_localization" type="navsat_transform_node" name="navsat_transform_node" />

	<node pkg="tf" type="static_transform_publisher" name="base_to_imu_tf" args="0 0 0 0 0 0 /base_link /imu 50" />
	<node pkg="tf" type="static_transform_publisher" name="base_to_laser_tf"  args="0 0 0 67.5 0 0 /base_link /laser_frame 50" />
</launch>