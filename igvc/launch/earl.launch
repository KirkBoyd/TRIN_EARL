<launch>

	<!--param name="/use_sim_time" value="true"/ -->

	<node pkg="rviz" type="rviz" name="rviz" />

	<node pkg="igvc" type="fake_scan" name="laser_scan">
		<param name="frame_id" value="laser_frame"/>
		<param name="calibrate_time" type="bool" value="true"/>  
		<param name="intensity" type="bool" value="false"/>
		<param name="min_ang" value="0"/>   
		<param name="max_ang" value="3.14"/>    
		<param name="cluster" value="1"/>
	</node>

	<remap from="odom" to="odometry/filtered" />

	<node name="rplidarNode" pkg="rplidar_ros"  type="rplidarNode">
		<param name="serial_port"         type="string" value="/dev/ttyUSB0"/>  
		<param name="serial_baudrate"     type="int"    value="115200"/>
		<param name="frame_id"            type="string" value="laser_frame"/>
		<param name="inverted"            type="bool"   value="false"/>
		<param name="angle_compensate"    type="bool"   value="true"/>
		<param name="angle_min"           value="3.14159/4"/>
		<param name="angle_max"           value="-3.14159/4"/>
	</node>

<!-- Changed params:
     minimumScore 0 
 -->

 <node pkg="hector_slam" type="hector_mapping" name="hector_mapping"/>
 <node pkg="hector_slam" type="hector_map_server" name="hector_map_server" />
 <node pkg="hector_slam" type="hector_trajectory_server" name="hector_trajectory_server" />

   <!-- node pkg="gmapping" type="slam_gmapping" name="slam_gmapping">

    <rosparam>
      map_frame: map
      odom_frame: odom
      map_update_interval: 1.0
      maxUrange: 30.0
      maxRange: 60.0
      sigma: 0.05
      kernelSize: 1
      lstep: 0.01
      astep: 0.02
      iterations: 5
      lsigma: 0.075
      ogain: 3.0
      lskip: 0
      minimumScore: 50
      linearUpdate: 2
      angularUpdate: 1
      temporalUpdate: -1.0
      resampleThreshold: 0.5
      particles: 150
      xmin: -100.0
      ymin: -100.0
      xmax: 100.0
      ymax: 100.0
      delta: 0.05
      llsamplerange: 0.01
      llsamplestep: 0.01
      lasamplerange: 0.05
      lasamplestep: 0.05
      tf_delay: 0.01
      base_frame: base_link
  </rosparam -->


  <!-- remap from="scan" to="lidar_scan" / -->

  <!-- remap from="/scan" to="/cam_scan" / -->
  <!-- /node -->

  <!-- include file="$(find usb_cam)/launch/usb_cam-test.launch" respawn="true" / -->

  <!-- include file="$(find viso2_ros)/launch/demo.launch" / -->

  <include file="$(find rosserial_server)/src/man_drive.launch" />

  <!-- Viso2 -->

  <include file="$(find phidgets_imu)/launch/imu2.launch" />

  <node pkg="nmea_navsat_driver" type="nmea_serial_driver" name="nmea_serial_driver">
  	<param name="port" value="/dev/ttyUSB1" />
  </node>

<!-- node pkg="igvc" type="blink_rate" name="blink_rate">
    <param name="blink" value="true" />
</node -->

<!-- 
<node pkg="gps_common" type="utm_odometry_node" name="gps_conv">
    <remap from="odom" to="vo" />
    <remap from="fix" to="/gps/fix" />
    <param name="rot_covariance" value="99999" />
    <param name="frame_id" value="base_link" />
</node>

<node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf" respawn="true">
    <param name="output_frame" value="odom"/>
    <param name="base_footprint_frame" value="base_link" />
    <param name="freq" value="30.0"/>
    <param name="sensor_timeout" value="1.0"/>
    
    <param name="odom_used" value="false"/>

    <remap from="imu_data" to="/imu/data"/>
    <param name="imu_used" value="true" />
    
    <remap from="vo" to="odom"/>
    <param name="vo_used" value="true"/>
    <param name="debug" value="false"/>
    <param name="self_diagnose" value="false"/>
</node>
-->

<node pkg="rosbag" type="record" name="rosbag_record" args="-o /odometry/filtered /base_link /lidar_scan /laser_frame /fix /imu/data /scan /odom" />


<remap from="odom" to="odometry/filtered" />

<include file="$(find robot_localization)/launch/ekf_template.launch" />
<include file="$(find robot_localization)/launch/ekf_template2.launch" />

<arg name="odom_frame_id"   default="odom"/>
<arg name="base_frame_id"   default="base_link"/>
<arg name="global_frame_id" default="map"/>
<arg name="odom_topic" default="odom" />
<arg name="laser_topic" default="scan" />

<node pkg="topic_tools" type="mux" respawn="true" name="mux" args="cmd_vel man_cmdvel mux:=mux_cmdvel" />

<node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
	<rosparam file="$(find igvc)/param/costmap_common_params.yaml" command="load" ns="global_costmap" />
	<rosparam file="$(find igvc)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />   
	<rosparam file="$(find igvc)/param/local_costmap_params.yaml" command="load" />   
	<rosparam file="$(find igvc)/param/global_costmap_params.yaml" command="load" />
	<rosparam file="$(find igvc)/param/dwa_local_planner_params.yaml" command="load" />
	<rosparam file="$(find igvc)/param/move_base_params.yaml" command="load" />
	<rosparam file="$(find igvc)/param/global_planner_params.yaml" command="load" />
	<rosparam file="$(find igvc)/param/navfn_global_planner_params.yaml" command="load" />

	<param name="global_costmap/global_frame" value="$(arg global_frame_id)"/>
	<param name="global_costmap/robot_base_frame" value="$(arg base_frame_id)"/>
	<param name="local_costmap/global_frame" value="$(arg global_frame_id)"/> <!-- Local -->
	<param name="local_costmap/robot_base_frame" value="$(arg base_frame_id)"/>

	<param name="DWAPlannerROS/global_frame_id" value="$(arg global_frame_id)"/> <!-- -->
</node>

<node pkg="igvc" type="twist_to_motors.py" name="twist_to_motors" />

<node pkg="robot_localization" type="navsat_transform_node" name="navsat_transform_node" />

<!--node pkg="tf" type="static_transform_publisher" name="base_to_camera_tf" args="0.1 0 0.75 0 0 0 /base_link /camera 50" / -->
<!-- node pkg="tf" type="static_transform_publisher" name="base_to_laser_tf"  args="0 0 0 -90 0 0 /base_link /laser_frame 10" respawn="true" / -->
<node pkg="igvc" type="motor_controller" name="motor_controller" />
<node pkg="tf" type="static_transform_publisher" name="base_to_imu_tf" args="0 0 0 0 0 0 /base_link /imu 50" />
<node pkg="tf" type="static_transform_publisher" name="base_to_laser_tf"  args="0 0 0 67.5 0 0 /base_link /laser_frame 50" />
<!-- node pkg="tf" type="static_transform_publisher" name="base_to_gps_tf"  args="0 1 0 0 0 0 /base_link /gps 50" / -->

</launch>
