// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: global_pose.proto

#ifndef PROTOBUF_global_5fpose_2eproto__INCLUDED
#define PROTOBUF_global_5fpose_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_global_5fpose_2eproto();
void protobuf_AssignDesc_global_5fpose_2eproto();
void protobuf_ShutdownFile_global_5fpose_2eproto();

class GlobalPose;

// ===================================================================

class GlobalPose : public ::google::protobuf::Message {
 public:
  GlobalPose();
  virtual ~GlobalPose();

  GlobalPose(const GlobalPose& from);

  inline GlobalPose& operator=(const GlobalPose& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GlobalPose& default_instance();

  void Swap(GlobalPose* other);

  // implements Message ----------------------------------------------

  GlobalPose* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GlobalPose& from);
  void MergeFrom(const GlobalPose& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double latitude = 1;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 1;
  inline double latitude() const;
  inline void set_latitude(double value);

  // required double longitude = 2;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  inline double longitude() const;
  inline void set_longitude(double value);

  // required double altitude = 3;
  inline bool has_altitude() const;
  inline void clear_altitude();
  static const int kAltitudeFieldNumber = 3;
  inline double altitude() const;
  inline void set_altitude(double value);

  // required double roll = 4;
  inline bool has_roll() const;
  inline void clear_roll();
  static const int kRollFieldNumber = 4;
  inline double roll() const;
  inline void set_roll(double value);

  // required double pitch = 5;
  inline bool has_pitch() const;
  inline void clear_pitch();
  static const int kPitchFieldNumber = 5;
  inline double pitch() const;
  inline void set_pitch(double value);

  // required double yaw = 6;
  inline bool has_yaw() const;
  inline void clear_yaw();
  static const int kYawFieldNumber = 6;
  inline double yaw() const;
  inline void set_yaw(double value);

  // @@protoc_insertion_point(class_scope:GlobalPose)
 private:
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_altitude();
  inline void clear_has_altitude();
  inline void set_has_roll();
  inline void clear_has_roll();
  inline void set_has_pitch();
  inline void clear_has_pitch();
  inline void set_has_yaw();
  inline void clear_has_yaw();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double latitude_;
  double longitude_;
  double altitude_;
  double roll_;
  double pitch_;
  double yaw_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_global_5fpose_2eproto();
  friend void protobuf_AssignDesc_global_5fpose_2eproto();
  friend void protobuf_ShutdownFile_global_5fpose_2eproto();

  void InitAsDefaultInstance();
  static GlobalPose* default_instance_;
};
// ===================================================================


// ===================================================================

// GlobalPose

// required double latitude = 1;
inline bool GlobalPose::has_latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GlobalPose::set_has_latitude() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GlobalPose::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GlobalPose::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double GlobalPose::latitude() const {
  return latitude_;
}
inline void GlobalPose::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
}

// required double longitude = 2;
inline bool GlobalPose::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GlobalPose::set_has_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GlobalPose::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GlobalPose::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double GlobalPose::longitude() const {
  return longitude_;
}
inline void GlobalPose::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
}

// required double altitude = 3;
inline bool GlobalPose::has_altitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GlobalPose::set_has_altitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GlobalPose::clear_has_altitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GlobalPose::clear_altitude() {
  altitude_ = 0;
  clear_has_altitude();
}
inline double GlobalPose::altitude() const {
  return altitude_;
}
inline void GlobalPose::set_altitude(double value) {
  set_has_altitude();
  altitude_ = value;
}

// required double roll = 4;
inline bool GlobalPose::has_roll() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GlobalPose::set_has_roll() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GlobalPose::clear_has_roll() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GlobalPose::clear_roll() {
  roll_ = 0;
  clear_has_roll();
}
inline double GlobalPose::roll() const {
  return roll_;
}
inline void GlobalPose::set_roll(double value) {
  set_has_roll();
  roll_ = value;
}

// required double pitch = 5;
inline bool GlobalPose::has_pitch() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GlobalPose::set_has_pitch() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GlobalPose::clear_has_pitch() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GlobalPose::clear_pitch() {
  pitch_ = 0;
  clear_has_pitch();
}
inline double GlobalPose::pitch() const {
  return pitch_;
}
inline void GlobalPose::set_pitch(double value) {
  set_has_pitch();
  pitch_ = value;
}

// required double yaw = 6;
inline bool GlobalPose::has_yaw() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GlobalPose::set_has_yaw() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GlobalPose::clear_has_yaw() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GlobalPose::clear_yaw() {
  yaw_ = 0;
  clear_has_yaw();
}
inline double GlobalPose::yaw() const {
  return yaw_;
}
inline void GlobalPose::set_yaw(double value) {
  set_has_yaw();
  yaw_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_global_5fpose_2eproto__INCLUDED
